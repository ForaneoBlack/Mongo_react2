{"ast":null,"code":"import * as React from 'react';\nimport PrimeReact, { localeOption, localeOptions } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { usePrevious, useOverlayListener, useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { InputText } from 'primereact/inputtext';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { UniqueComponentId, DomHandler, ObjectUtils, mask, ZIndexUtils, classNames } from 'primereact/utils';\nimport { Ripple } from 'primereact/ripple';\nimport { CSSTransition } from 'primereact/csstransition';\nimport { Portal } from 'primereact/portal';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();\n}\n\nvar CalendarPanel = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var createElement = function createElement() {\n    return /*#__PURE__*/React.createElement(CSSTransition, {\n      nodeRef: ref,\n      classNames: \"p-connected-overlay\",\n      \"in\": props[\"in\"],\n      timeout: {\n        enter: 120,\n        exit: 100\n      },\n      options: props.transitionOptions,\n      unmountOnExit: true,\n      onEnter: props.onEnter,\n      onEntered: props.onEntered,\n      onExit: props.onExit,\n      onExited: props.onExited\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: ref,\n      className: props.className,\n      style: props.style,\n      onClick: props.onClick,\n      onMouseUp: props.onMouseUp\n    }, props.children));\n  };\n\n  var element = createElement();\n  return props.inline ? element : /*#__PURE__*/React.createElement(Portal, {\n    element: element,\n    appendTo: props.appendTo\n  });\n});\nCalendarPanel.displayName = 'CalendarPanel';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar Calendar = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusedState = _React$useState2[0],\n      setFocusedState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      overlayVisibleState = _React$useState4[0],\n      setOverlayVisibleState = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      viewDateState = _React$useState6[0],\n      setViewDateState = _React$useState6[1];\n\n  var elementRef = React.useRef(null);\n  var overlayRef = React.useRef(null);\n  var inputRef = React.useRef(props.inputRef);\n  var navigation = React.useRef(null);\n  var ignoreFocusFunctionality = React.useRef(false);\n  var isKeydown = React.useRef(false);\n  var timePickerTimer = React.useRef(null);\n  var viewStateChanged = React.useRef(false);\n  var touchUIMask = React.useRef(null);\n  var overlayEventListener = React.useRef(null);\n  var touchUIMaskClickListener = React.useRef(null);\n  var isOverlayClicked = React.useRef(false);\n  var ignoreMaskChange = React.useRef(false);\n\n  var _React$useState7 = React.useState('date'),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      currentView = _React$useState8[0],\n      setCurrentView = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      currentMonth = _React$useState10[0],\n      setCurrentMonth = _React$useState10[1];\n\n  var _React$useState11 = React.useState(null),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      currentYear = _React$useState12[0],\n      setCurrentYear = _React$useState12[1];\n\n  var _React$useState13 = React.useState([]),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      yearOptions = _React$useState14[0],\n      setYearOptions = _React$useState14[1];\n\n  var previousValue = usePrevious(props.value);\n  var visible = props.inline || (props.onVisibleChange ? props.visible : overlayVisibleState);\n  var attributeSelector = UniqueComponentId();\n\n  var _useOverlayListener = useOverlayListener({\n    target: elementRef,\n    overlay: overlayRef,\n    listener: function listener(event, _ref) {\n      var type = _ref.type,\n          valid = _ref.valid;\n\n      if (valid) {\n        type === 'outside' ? !isOverlayClicked.current && !isNavIconClicked(event.target) && hide('outside') : hide();\n      }\n\n      isOverlayClicked.current = false;\n    },\n    when: !(props.touchUI || props.inline) && visible\n  }),\n      _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2),\n      bindOverlayListener = _useOverlayListener2[0],\n      unbindOverlayListener = _useOverlayListener2[1];\n\n  var getDateFormat = function getDateFormat() {\n    return props.dateFormat || localeOption('dateFormat', props.locale);\n  };\n\n  var onInputFocus = function onInputFocus(event) {\n    if (ignoreFocusFunctionality.current) {\n      setFocusedState(true);\n      ignoreFocusFunctionality.current = false;\n    } else {\n      if (props.showOnFocus && !visible) {\n        show();\n      }\n\n      setFocusedState(true);\n      props.onFocus && props.onFocus(event);\n    }\n  };\n\n  var onInputBlur = function onInputBlur(event) {\n    setFocusedState(false);\n    !props.keepInvalid && updateInputfield(props.value);\n    props.onBlur && props.onBlur(event);\n  };\n\n  var onInputKeyDown = function onInputKeyDown(event) {\n    isKeydown.current = true;\n\n    switch (event.which) {\n      //escape\n      case 27:\n        {\n          hide();\n          break;\n        }\n      //tab\n\n      case 9:\n        {\n          visible && trapFocus(event);\n          props.touchUI && disableModality();\n          break;\n        }\n    }\n  };\n\n  var onUserInput = function onUserInput(event) {\n    // IE 11 Workaround for input placeholder\n    if (!isKeydown.current) {\n      return;\n    }\n\n    isKeydown.current = false;\n    updateValueOnInput(event, event.target.value);\n    props.onInput && props.onInput(event);\n  };\n\n  var updateValueOnInput = function updateValueOnInput(event, rawValue) {\n    try {\n      var value = parseValueFromString(rawValue);\n\n      if (isValidSelection(value)) {\n        updateModel(event, value);\n        updateViewDate(event, value.length ? value[0] : value);\n      }\n    } catch (err) {\n      //invalid date\n      var _value = props.keepInvalid ? rawValue : null;\n\n      updateModel(event, _value);\n    }\n  };\n\n  var reFocusInputField = function reFocusInputField() {\n    if (!props.inline && inputRef.current) {\n      ignoreFocusFunctionality.current = true;\n      DomHandler.focus(inputRef.current);\n    }\n  };\n\n  var isValidSelection = function isValidSelection(value) {\n    var isValid = true;\n\n    if (isSingleSelection()) {\n      if (!(isSelectable(value.getDate(), value.getMonth(), value.getFullYear(), false) && isSelectableTime(value))) {\n        isValid = false;\n      }\n    } else if (value.every(function (v) {\n      return isSelectable(v.getDate(), v.getMonth(), v.getFullYear(), false) && isSelectableTime(v);\n    })) {\n      if (isRangeSelection()) {\n        isValid = value.length > 1 && value[1] > value[0] ? true : false;\n      }\n    }\n\n    return isValid;\n  };\n\n  var onButtonClick = function onButtonClick() {\n    visible ? hide() : show();\n  };\n\n  var onPrevButtonClick = function onPrevButtonClick(event) {\n    navigation.current = {\n      backward: true,\n      button: true\n    };\n    navBackward(event);\n  };\n\n  var onNextButtonClick = function onNextButtonClick(event) {\n    navigation.current = {\n      backward: false,\n      button: true\n    };\n    navForward(event);\n  };\n\n  var onContainerButtonKeydown = function onContainerButtonKeydown(event) {\n    switch (event.which) {\n      //tab\n      case 9:\n        trapFocus(event);\n        break;\n      //escape\n\n      case 27:\n        hide(null, reFocusInputField);\n        event.preventDefault();\n        break;\n    }\n  };\n\n  var trapFocus = function trapFocus(event) {\n    event.preventDefault();\n    var focusableElements = DomHandler.getFocusableElements(overlayRef.current);\n\n    if (focusableElements && focusableElements.length > 0) {\n      if (!document.activeElement) {\n        focusableElements[0].focus();\n      } else {\n        var focusedIndex = focusableElements.indexOf(document.activeElement);\n\n        if (event.shiftKey) {\n          if (focusedIndex === -1 || focusedIndex === 0) focusableElements[focusableElements.length - 1].focus();else focusableElements[focusedIndex - 1].focus();\n        } else {\n          if (focusedIndex === -1 || focusedIndex === focusableElements.length - 1) focusableElements[0].focus();else focusableElements[focusedIndex + 1].focus();\n        }\n      }\n    }\n  };\n\n  var updateFocus = function updateFocus() {\n    if (navigation.current) {\n      if (navigation.current.button) {\n        initFocusableCell();\n        if (navigation.current.backward) DomHandler.findSingle(overlayRef.current, '.p-datepicker-prev').focus();else DomHandler.findSingle(overlayRef.current, '.p-datepicker-next').focus();\n      } else {\n        var cell;\n\n        if (navigation.current.backward) {\n          var cells = DomHandler.find(overlayRef.current, '.p-datepicker-calendar td span:not(.p-disabled)');\n          cell = cells[cells.length - 1];\n        } else {\n          cell = DomHandler.findSingle(overlayRef.current, '.p-datepicker-calendar td span:not(.p-disabled)');\n        }\n\n        if (cell) {\n          cell.tabIndex = '0';\n          cell.focus();\n        }\n      }\n\n      navigation.current = null;\n    } else {\n      initFocusableCell();\n    }\n  };\n\n  var initFocusableCell = function initFocusableCell() {\n    var cell;\n\n    if (props.view === 'month') {\n      var cells = DomHandler.find(overlayRef.current, '.p-monthpicker .p-monthpicker-month');\n      var selectedCell = DomHandler.findSingle(overlayRef.current, '.p-monthpicker .p-monthpicker-month.p-highlight');\n      cells.forEach(function (cell) {\n        return cell.tabIndex = -1;\n      });\n      cell = selectedCell || cells[0];\n    } else {\n      cell = DomHandler.findSingle(overlayRef.current, 'span.p-highlight');\n\n      if (!cell) {\n        var todayCell = DomHandler.findSingle(overlayRef.current, 'td.p-datepicker-today span:not(.p-disabled)');\n        cell = todayCell || DomHandler.findSingle(overlayRef.current, '.p-datepicker-calendar td span:not(.p-disabled)');\n      }\n    }\n\n    if (cell) {\n      cell.tabIndex = '0';\n    }\n  };\n\n  var navBackward = function navBackward(event) {\n    if (props.disabled) {\n      event.preventDefault();\n      return;\n    }\n\n    var newViewDate = new Date(getViewDate().getTime());\n    newViewDate.setDate(1);\n\n    if (currentView === 'date') {\n      if (newViewDate.getMonth() === 0) {\n        newViewDate.setMonth(11);\n        newViewDate.setFullYear(decrementYear());\n        setCurrentMonth(11);\n      } else {\n        newViewDate.setMonth(newViewDate.getMonth() - 1);\n        setCurrentMonth(function (prevState) {\n          return prevState - 1;\n        });\n      }\n    } else if (currentView === 'month') {\n      var newYear = newViewDate.getFullYear() - 1;\n\n      if (props.yearNavigator) {\n        var minYear = parseInt(props.yearRange.split(':')[0], 10);\n\n        if (newYear < minYear) {\n          newYear = minYear;\n        }\n      }\n\n      newViewDate.setFullYear(newYear);\n    }\n\n    if (currentView === 'month') {\n      newViewDate.setFullYear(decrementYear());\n    } else if (currentView === 'year') {\n      newViewDate.setFullYear(decrementDecade());\n    }\n\n    updateViewDate(event, newViewDate);\n    event.preventDefault();\n  };\n\n  var navForward = function navForward(event) {\n    if (props.disabled) {\n      event.preventDefault();\n      return;\n    }\n\n    var newViewDate = new Date(getViewDate().getTime());\n    newViewDate.setDate(1);\n\n    if (currentView === 'date') {\n      if (newViewDate.getMonth() === 11) {\n        newViewDate.setMonth(0);\n        newViewDate.setFullYear(incrementYear());\n        setCurrentMonth(0);\n      } else {\n        newViewDate.setMonth(newViewDate.getMonth() + 1);\n        setCurrentMonth(function (prevState) {\n          return prevState + 1;\n        });\n      }\n    } else if (currentView === 'month') {\n      var newYear = newViewDate.getFullYear() + 1;\n\n      if (props.yearNavigator) {\n        var maxYear = parseInt(props.yearRange.split(':')[1], 10);\n\n        if (newYear > maxYear) {\n          newYear = maxYear;\n        }\n      }\n\n      newViewDate.setFullYear(newYear);\n    }\n\n    if (currentView === 'month') {\n      newViewDate.setFullYear(incrementYear());\n    } else if (currentView === 'year') {\n      newViewDate.setFullYear(incrementDecade());\n    }\n\n    updateViewDate(event, newViewDate);\n    event.preventDefault();\n  };\n\n  var populateYearOptions = function populateYearOptions(start, end) {\n    var _yearOptions = [];\n\n    for (var i = start; i <= end; i++) {\n      yearOptions.push(i);\n    }\n\n    setYearOptions(_yearOptions);\n  };\n\n  var decrementYear = function decrementYear() {\n    var _currentYear = currentYear - 1;\n\n    setCurrentYear(_currentYear);\n\n    if (props.yearNavigator && _currentYear < yearOptions[0]) {\n      var difference = yearOptions[yearOptions.length - 1] - yearOptions[0];\n      populateYearOptions(yearOptions[0] - difference, yearOptions[yearOptions.length - 1] - difference);\n    }\n\n    return _currentYear;\n  };\n\n  var incrementYear = function incrementYear() {\n    var _currentYear = currentYear + 1;\n\n    setCurrentYear(_currentYear);\n\n    if (props.yearNavigator && _currentYear.current > yearOptions[yearOptions.length - 1]) {\n      var difference = yearOptions[yearOptions.length - 1] - yearOptions[0];\n      populateYearOptions(yearOptions[0] + difference, yearOptions[yearOptions.length - 1] + difference);\n    }\n\n    return _currentYear;\n  };\n\n  var onMonthDropdownChange = function onMonthDropdownChange(event, value) {\n    var currentViewDate = getViewDate();\n    var newViewDate = new Date(currentViewDate.getTime());\n    newViewDate.setMonth(parseInt(value, 10));\n    updateViewDate(event, newViewDate);\n  };\n\n  var onYearDropdownChange = function onYearDropdownChange(event, value) {\n    var currentViewDate = getViewDate();\n    var newViewDate = new Date(currentViewDate.getTime());\n    newViewDate.setFullYear(parseInt(value, 10));\n    updateViewDate(event, newViewDate);\n  };\n\n  var onTodayButtonClick = function onTodayButtonClick(event) {\n    var today = new Date();\n    var dateMeta = {\n      day: today.getDate(),\n      month: today.getMonth(),\n      year: today.getFullYear(),\n      today: true,\n      selectable: true\n    };\n    var timeMeta = {\n      hours: today.getHours(),\n      minutes: today.getMinutes(),\n      seconds: today.getSeconds(),\n      milliseconds: today.getMilliseconds()\n    };\n    updateViewDate(event, today);\n    onDateSelect(event, dateMeta, timeMeta);\n    props.onTodayButtonClick && props.onTodayButtonClick(event);\n  };\n\n  var onClearButtonClick = function onClearButtonClick(event) {\n    updateModel(event, null);\n    updateInputfield(null);\n    hide();\n    props.onClearButtonClick && props.onClearButtonClick(event);\n  };\n\n  var onPanelClick = function onPanelClick(event) {\n    if (!props.inline) {\n      OverlayService.emit('overlay-click', {\n        originalEvent: event,\n        target: elementRef.current\n      });\n    }\n  };\n\n  var onPanelMouseUp = function onPanelMouseUp(event) {\n    onPanelClick(event);\n  };\n\n  var onTimePickerElementMouseDown = function onTimePickerElementMouseDown(event, type, direction) {\n    if (!props.disabled) {\n      repeat(event, null, type, direction);\n      event.preventDefault();\n    }\n  };\n\n  var onTimePickerElementMouseUp = function onTimePickerElementMouseUp() {\n    if (!props.disabled) {\n      clearTimePickerTimer();\n    }\n  };\n\n  var onTimePickerElementMouseLeave = function onTimePickerElementMouseLeave() {\n    if (!props.disabled) {\n      clearTimePickerTimer();\n    }\n  };\n\n  var repeat = function repeat(event, interval, type, direction) {\n    clearTimePickerTimer();\n    timePickerTimer.current = setTimeout(function () {\n      repeat(event, 100, type, direction);\n    }, interval || 500);\n\n    switch (type) {\n      case 0:\n        if (direction === 1) incrementHour(event);else decrementHour(event);\n        break;\n\n      case 1:\n        if (direction === 1) incrementMinute(event);else decrementMinute(event);\n        break;\n\n      case 2:\n        if (direction === 1) incrementSecond(event);else decrementSecond(event);\n        break;\n\n      case 3:\n        if (direction === 1) incrementMilliSecond(event);else decrementMilliSecond(event);\n        break;\n    }\n  };\n\n  var clearTimePickerTimer = function clearTimePickerTimer() {\n    if (timePickerTimer.current) {\n      clearTimeout(timePickerTimer.current);\n    }\n  };\n\n  var incrementHour = function incrementHour(event) {\n    var currentTime = getCurrentDateTime();\n    var currentHour = currentTime.getHours();\n    var newHour = currentHour + props.stepHour;\n    newHour = newHour >= 24 ? newHour - 24 : newHour;\n\n    if (validateHour(newHour, currentTime)) {\n      if (props.maxDate && props.maxDate.toDateString() === currentTime.toDateString() && props.maxDate.getHours() === newHour) {\n        if (props.maxDate.getMinutes() < currentTime.getMinutes()) {\n          if (props.maxDate.getSeconds() < currentTime.getSeconds()) {\n            if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), props.maxDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.maxDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else if (props.maxDate.getMinutes() === currentTime.getMinutes()) {\n          if (props.maxDate.getSeconds() < currentTime.getSeconds()) {\n            if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), props.maxDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.maxDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, newHour, currentTime.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, newHour, currentTime.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var decrementHour = function decrementHour(event) {\n    var currentTime = getCurrentDateTime();\n    var currentHour = currentTime.getHours();\n    var newHour = currentHour - props.stepHour;\n    newHour = newHour < 0 ? newHour + 24 : newHour;\n\n    if (validateHour(newHour, currentTime)) {\n      if (props.minDate && props.minDate.toDateString() === currentTime.toDateString() && props.minDate.getHours() === newHour) {\n        if (props.minDate.getMinutes() > currentTime.getMinutes()) {\n          if (props.minDate.getSeconds() > currentTime.getSeconds()) {\n            if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), props.minDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.minDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else if (props.minDate.getMinutes() === currentTime.getMinutes()) {\n          if (props.minDate.getSeconds() > currentTime.getSeconds()) {\n            if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), props.minDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.minDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, newHour, currentTime.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, newHour, currentTime.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var doStepMinute = function doStepMinute(currentMinute, step) {\n    if (props.stepMinute <= 1) {\n      return step ? currentMinute + step : currentMinute;\n    }\n\n    if (!step) {\n      step = props.stepMinute;\n\n      if (currentMinute % step === 0) {\n        return currentMinute;\n      }\n    }\n\n    return Math.floor((currentMinute + step) / step) * step;\n  };\n\n  var incrementMinute = function incrementMinute(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMinute = currentTime.getMinutes();\n    var newMinute = doStepMinute(currentMinute, props.stepMinute);\n    newMinute = newMinute > 59 ? newMinute - 60 : newMinute;\n\n    if (validateMinute(newMinute, currentTime)) {\n      if (props.maxDate && props.maxDate.toDateString() === currentTime.toDateString() && props.maxDate.getMinutes() === newMinute) {\n        if (props.maxDate.getSeconds() < currentTime.getSeconds()) {\n          if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n            updateTime(event, currentTime.getHours(), newMinute, props.maxDate.getSeconds(), props.maxDate.getMilliseconds());\n          } else {\n            updateTime(event, currentTime.getHours(), newMinute, props.maxDate.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var decrementMinute = function decrementMinute(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMinute = currentTime.getMinutes();\n    var newMinute = doStepMinute(currentMinute, -props.stepMinute);\n    newMinute = newMinute < 0 ? newMinute + 60 : newMinute;\n\n    if (validateMinute(newMinute, currentTime)) {\n      if (props.minDate && props.minDate.toDateString() === currentTime.toDateString() && props.minDate.getMinutes() === newMinute) {\n        if (props.minDate.getSeconds() > currentTime.getSeconds()) {\n          if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n            updateTime(event, currentTime.getHours(), newMinute, props.minDate.getSeconds(), props.minDate.getMilliseconds());\n          } else {\n            updateTime(event, currentTime.getHours(), newMinute, props.minDate.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var incrementSecond = function incrementSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentSecond = currentTime.getSeconds();\n    var newSecond = currentSecond + props.stepSecond;\n    newSecond = newSecond > 59 ? newSecond - 60 : newSecond;\n\n    if (validateSecond(newSecond, currentTime)) {\n      if (props.maxDate && props.maxDate.toDateString() === currentTime.toDateString() && props.maxDate.getSeconds() === newSecond) {\n        if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, props.maxDate.getMilliseconds());\n        } else {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var decrementSecond = function decrementSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentSecond = currentTime.getSeconds();\n    var newSecond = currentSecond - props.stepSecond;\n    newSecond = newSecond < 0 ? newSecond + 60 : newSecond;\n\n    if (validateSecond(newSecond, currentTime)) {\n      if (props.minDate && props.minDate.toDateString() === currentTime.toDateString() && props.minDate.getSeconds() === newSecond) {\n        if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, props.minDate.getMilliseconds());\n        } else {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var incrementMilliSecond = function incrementMilliSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMillisecond = currentTime.getMilliseconds();\n    var newMillisecond = currentMillisecond + props.stepMillisec;\n    newMillisecond = newMillisecond > 999 ? newMillisecond - 1000 : newMillisecond;\n\n    if (validateMillisecond(newMillisecond, currentTime)) {\n      updateTime(event, currentTime.getHours(), currentTime.getMinutes(), currentTime.getSeconds(), newMillisecond);\n    }\n\n    event.preventDefault();\n  };\n\n  var decrementMilliSecond = function decrementMilliSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMillisecond = currentTime.getMilliseconds();\n    var newMillisecond = currentMillisecond - props.stepMillisec;\n    newMillisecond = newMillisecond < 0 ? newMillisecond + 999 : newMillisecond;\n\n    if (validateMillisecond(newMillisecond, currentTime)) {\n      updateTime(event, currentTime.getHours(), currentTime.getMinutes(), currentTime.getSeconds(), newMillisecond);\n    }\n\n    event.preventDefault();\n  };\n\n  var toggleAmPm = function toggleAmPm(event) {\n    var currentTime = getCurrentDateTime();\n    var currentHour = currentTime.getHours();\n    var newHour = currentHour >= 12 ? currentHour - 12 : currentHour + 12;\n\n    if (validateHour(convertTo24Hour(newHour, !(currentHour > 11)), currentTime)) {\n      updateTime(event, newHour, currentTime.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n    }\n\n    event.preventDefault();\n  };\n\n  var getViewDate = function getViewDate(date) {\n    var propValue = props.value;\n    var viewDate = date || (props.onViewDateChange ? props.viewDate : viewDateState);\n\n    if (Array.isArray(propValue)) {\n      propValue = propValue[0];\n    }\n\n    return viewDate && isValidDate(viewDate) ? viewDate : propValue && isValidDate(propValue) ? propValue : new Date();\n  };\n\n  var getCurrentDateTime = function getCurrentDateTime() {\n    if (isSingleSelection()) {\n      return props.value && props.value instanceof Date ? props.value : getViewDate();\n    } else if (isMultipleSelection()) {\n      if (props.value && props.value.length) {\n        return props.value[props.value.length - 1];\n      }\n    } else if (isRangeSelection()) {\n      if (props.value && props.value.length) {\n        var startDate = props.value[0];\n        var endDate = props.value[1];\n        return endDate || startDate;\n      }\n    }\n\n    return new Date();\n  };\n\n  var isValidDate = function isValidDate(date) {\n    return date instanceof Date && !isNaN(date);\n  };\n\n  var convertTo24Hour = function convertTo24Hour(hour, pm) {\n    if (props.hourFormat == '12') {\n      return hour === 12 ? pm ? 12 : 0 : pm ? hour + 12 : hour;\n    }\n\n    return hour;\n  };\n\n  var validateHour = function validateHour(hour, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (props.minDate.getHours() > hour) {\n        valid = false;\n      }\n    }\n\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (props.maxDate.getHours() < hour) {\n        valid = false;\n      }\n    }\n\n    return valid;\n  };\n\n  var validateMinute = function validateMinute(minute, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.minDate.getHours()) {\n        if (props.minDate.getMinutes() > minute) {\n          valid = false;\n        }\n      }\n    }\n\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.maxDate.getHours()) {\n        if (props.maxDate.getMinutes() < minute) {\n          valid = false;\n        }\n      }\n    }\n\n    return valid;\n  };\n\n  var validateSecond = function validateSecond(second, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.minDate.getHours() && value.getMinutes() === props.minDate.getMinutes()) {\n        if (props.minDate.getSeconds() > second) {\n          valid = false;\n        }\n      }\n    }\n\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.maxDate.getHours() && value.getMinutes() === props.maxDate.getMinutes()) {\n        if (props.maxDate.getSeconds() < second) {\n          valid = false;\n        }\n      }\n    }\n\n    return valid;\n  };\n\n  var validateMillisecond = function validateMillisecond(millisecond, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.minDate.getHours() && value.getSeconds() === props.minDate.getSeconds() && value.getMinutes() === props.minDate.getMinutes()) {\n        if (props.minDate.getMilliseconds() > millisecond) {\n          valid = false;\n        }\n      }\n    }\n\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.maxDate.getHours() && value.getSeconds() === props.maxDate.getSeconds() && value.getMinutes() === props.maxDate.getMinutes()) {\n        if (props.maxDate.getMilliseconds() < millisecond) {\n          valid = false;\n        }\n      }\n    }\n\n    return valid;\n  };\n\n  var validateDate = function validateDate(value) {\n    if (props.yearNavigator) {\n      var viewYear = value.getFullYear();\n      var minRangeYear = props.yearRange ? parseInt(props.yearRange.split(':')[0], 10) : null;\n      var maxRangeYear = props.yearRange ? parseInt(props.yearRange.split(':')[1], 10) : null;\n      var minYear = props.minDate && minRangeYear != null ? Math.max(props.minDate.getFullYear(), minRangeYear) : props.minDate || minRangeYear;\n      var maxYear = props.maxDate && maxRangeYear != null ? Math.min(props.maxDate.getFullYear(), maxRangeYear) : props.maxDate || maxRangeYear;\n\n      if (minYear && minYear > viewYear) {\n        viewYear = minYear;\n      }\n\n      if (maxYear && maxYear < viewYear) {\n        viewYear = maxYear;\n      }\n\n      value.setFullYear(viewYear);\n    }\n\n    if (props.monthNavigator && props.view !== 'month') {\n      var viewMonth = value.getMonth();\n      var viewMonthWithMinMax = parseInt(isInMinYear(value) && Math.max(props.minDate.getMonth(), viewMonth).toString() || isInMaxYear(value) && Math.min(props.maxDate.getMonth(), viewMonth).toString() || viewMonth);\n      value.setMonth(viewMonthWithMinMax);\n    }\n  };\n\n  var updateTime = function updateTime(event, hour, minute, second, millisecond) {\n    var newDateTime = getCurrentDateTime();\n    newDateTime.setHours(hour);\n    newDateTime.setMinutes(minute);\n    newDateTime.setSeconds(second);\n    newDateTime.setMilliseconds(millisecond);\n\n    if (isMultipleSelection()) {\n      if (props.value && props.value.length) {\n        var value = _toConsumableArray(props.value);\n\n        value[value.length - 1] = newDateTime;\n        newDateTime = value;\n      } else {\n        newDateTime = [newDateTime];\n      }\n    } else if (isRangeSelection()) {\n      if (props.value && props.value.length) {\n        var startDate = props.value[0];\n        var endDate = props.value[1];\n        newDateTime = endDate ? [startDate, newDateTime] : [newDateTime, null];\n      } else {\n        newDateTime = [newDateTime, null];\n      }\n    }\n\n    updateModel(event, newDateTime);\n\n    if (props.onSelect) {\n      props.onSelect({\n        originalEvent: event,\n        value: newDateTime\n      });\n    }\n\n    updateInputfield(newDateTime);\n  };\n\n  var updateViewDate = function updateViewDate(event, value) {\n    validateDate(value);\n\n    if (props.onViewDateChange) {\n      props.onViewDateChange({\n        originalEvent: event,\n        value: value\n      });\n    } else {\n      viewStateChanged.current = true;\n      setViewDateState(value);\n    }\n\n    setCurrentMonth(value.getMonth());\n    setCurrentYear(value.getFullYear());\n  };\n\n  var setNavigationState = function setNavigationState(newViewDate) {\n    if (!props.showMinMaxRange || props.view !== 'date' || !overlayRef.current) {\n      return;\n    }\n\n    var navPrev = DomHandler.findSingle(overlayRef.current, '.p-datepicker-prev');\n    var navNext = DomHandler.findSingle(overlayRef.current, '.p-datepicker-next');\n\n    if (props.disabled) {\n      DomHandler.addClass(navPrev, 'p-disabled');\n      DomHandler.addClass(navNext, 'p-disabled');\n      return;\n    } // previous (check first day of month at 00:00:00)\n\n\n    if (props.minDate) {\n      var firstDayOfMonth = new Date(newViewDate.getTime());\n\n      if (firstDayOfMonth.getMonth() === 0) {\n        firstDayOfMonth.setMonth(11, 1);\n        firstDayOfMonth.setFullYear(firstDayOfMonth.getFullYear() - 1);\n      } else {\n        firstDayOfMonth.setMonth(firstDayOfMonth.getMonth() - 1, 1);\n      }\n\n      firstDayOfMonth.setHours(0);\n      firstDayOfMonth.setMinutes(0);\n      firstDayOfMonth.setSeconds(0);\n\n      if (props.minDate > firstDayOfMonth) {\n        DomHandler.addClass(navPrev, 'p-disabled');\n      } else {\n        DomHandler.removeClass(navPrev, 'p-disabled');\n      }\n    } // next (check last day of month at 11:59:59)\n\n\n    if (props.maxDate) {\n      var lastDayOfMonth = new Date(newViewDate.getTime());\n\n      if (lastDayOfMonth.getMonth() === 11) {\n        lastDayOfMonth.setMonth(0, 1);\n        lastDayOfMonth.setFullYear(lastDayOfMonth.getFullYear() + 1);\n      } else {\n        lastDayOfMonth.setMonth(lastDayOfMonth.getMonth() + 1, 1);\n      }\n\n      lastDayOfMonth.setHours(0);\n      lastDayOfMonth.setMinutes(0);\n      lastDayOfMonth.setSeconds(0);\n      lastDayOfMonth.setSeconds(-1);\n\n      if (props.maxDate < lastDayOfMonth) {\n        DomHandler.addClass(navNext, 'p-disabled');\n      } else {\n        DomHandler.removeClass(navNext, 'p-disabled');\n      }\n    }\n  };\n\n  var onDateCellKeydown = function onDateCellKeydown(event, date, groupIndex) {\n    var cellContent = event.currentTarget;\n    var cell = cellContent.parentElement;\n\n    switch (event.which) {\n      //down arrow\n      case 40:\n        {\n          cellContent.tabIndex = '-1';\n          var cellIndex = DomHandler.index(cell);\n          var nextRow = cell.parentElement.nextElementSibling;\n\n          if (nextRow) {\n            var focusCell = nextRow.children[cellIndex].children[0];\n\n            if (DomHandler.hasClass(focusCell, 'p-disabled')) {\n              navigation.current = {\n                backward: false\n              };\n              navForward(event);\n            } else {\n              nextRow.children[cellIndex].children[0].tabIndex = '0';\n              nextRow.children[cellIndex].children[0].focus();\n            }\n          } else {\n            navigation.current = {\n              backward: false\n            };\n            navForward(event);\n          }\n\n          event.preventDefault();\n          break;\n        }\n      //up arrow\n\n      case 38:\n        {\n          cellContent.tabIndex = '-1';\n\n          var _cellIndex = DomHandler.index(cell);\n\n          var prevRow = cell.parentElement.previousElementSibling;\n\n          if (prevRow) {\n            var _focusCell = prevRow.children[_cellIndex].children[0];\n\n            if (DomHandler.hasClass(_focusCell, 'p-disabled')) {\n              navigation.current = {\n                backward: true\n              };\n              navBackward(event);\n            } else {\n              _focusCell.tabIndex = '0';\n\n              _focusCell.focus();\n            }\n          } else {\n            navigation.current = {\n              backward: true\n            };\n            navBackward(event);\n          }\n\n          event.preventDefault();\n          break;\n        }\n      //left arrow\n\n      case 37:\n        {\n          cellContent.tabIndex = '-1';\n          var prevCell = cell.previousElementSibling;\n\n          if (prevCell) {\n            var _focusCell2 = prevCell.children[0];\n\n            if (DomHandler.hasClass(_focusCell2, 'p-disabled')) {\n              navigateToMonth(true, groupIndex, event);\n            } else {\n              _focusCell2.tabIndex = '0';\n\n              _focusCell2.focus();\n            }\n          } else {\n            navigateToMonth(true, groupIndex, event);\n          }\n\n          event.preventDefault();\n          break;\n        }\n      //right arrow\n\n      case 39:\n        {\n          cellContent.tabIndex = '-1';\n          var nextCell = cell.nextElementSibling;\n\n          if (nextCell) {\n            var _focusCell3 = nextCell.children[0];\n\n            if (DomHandler.hasClass(_focusCell3, 'p-disabled')) {\n              navigateToMonth(false, groupIndex, event);\n            } else {\n              _focusCell3.tabIndex = '0';\n\n              _focusCell3.focus();\n            }\n          } else {\n            navigateToMonth(false, groupIndex, event);\n          }\n\n          event.preventDefault();\n          break;\n        }\n      //enter\n\n      case 13:\n        {\n          onDateSelect(event, date);\n          event.preventDefault();\n          break;\n        }\n      //escape\n\n      case 27:\n        {\n          hide(null, reFocusInputField);\n          event.preventDefault();\n          break;\n        }\n      //tab\n\n      case 9:\n        {\n          trapFocus(event);\n          break;\n        }\n    }\n  };\n\n  var navigateToMonth = function navigateToMonth(prev, groupIndex, event) {\n    if (prev) {\n      if (props.numberOfMonths === 1 || groupIndex === 0) {\n        navigation.current = {\n          backward: true\n        };\n        navBackward(event);\n      } else {\n        var prevMonthContainer = overlayRef.current.children[groupIndex - 1];\n        var cells = DomHandler.find(prevMonthContainer, '.p-datepicker-calendar td span:not(.p-disabled)');\n        var focusCell = cells[cells.length - 1];\n        focusCell.tabIndex = '0';\n        focusCell.focus();\n      }\n    } else {\n      if (props.numberOfMonths === 1 || groupIndex === props.numberOfMonths - 1) {\n        navigation.current = {\n          backward: false\n        };\n        navForward(event);\n      } else {\n        var nextMonthContainer = overlayRef.current.children[groupIndex + 1];\n\n        var _focusCell4 = DomHandler.findSingle(nextMonthContainer, '.p-datepicker-calendar td span:not(.p-disabled)');\n\n        _focusCell4.tabIndex = '0';\n\n        _focusCell4.focus();\n      }\n    }\n  };\n\n  var onDateSelect = function onDateSelect(event, dateMeta, timeMeta) {\n    if (props.disabled || !dateMeta.selectable) {\n      event.preventDefault();\n      return;\n    }\n\n    DomHandler.find(overlayRef.current, '.p-datepicker-calendar td span:not(.p-disabled)').forEach(function (cell) {\n      return cell.tabIndex = -1;\n    });\n    event.currentTarget.focus();\n\n    if (isMultipleSelection()) {\n      if (isSelected(dateMeta)) {\n        var value = props.value.filter(function (date, i) {\n          return !isDateEquals(date, dateMeta);\n        });\n        updateModel(event, value);\n        updateInputfield(value);\n      } else if (!props.maxDateCount || !props.value || props.maxDateCount > props.value.length) {\n        selectDate(event, dateMeta, timeMeta);\n      }\n    } else {\n      selectDate(event, dateMeta, timeMeta);\n    }\n\n    if (!props.inline && isSingleSelection() && (!props.showTime || props.hideOnDateTimeSelect)) {\n      setTimeout(function () {\n        hide('dateselect');\n      }, 100);\n\n      if (touchUIMask.current) {\n        disableModality();\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  var selectTime = function selectTime(date, timeMeta) {\n    if (props.showTime) {\n      var hours, minutes, seconds, milliseconds;\n\n      if (timeMeta) {\n        hours = timeMeta.hours;\n        minutes = timeMeta.minutes;\n        seconds = timeMeta.seconds;\n        milliseconds = timeMeta.milliseconds;\n      } else {\n        var time = getCurrentDateTime();\n        var _ref2 = [time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()];\n        hours = _ref2[0];\n        minutes = _ref2[1];\n        seconds = _ref2[2];\n        milliseconds = _ref2[3];\n      }\n\n      date.setHours(hours);\n      date.setMinutes(minutes);\n      date.setSeconds(seconds);\n      date.setMilliseconds(milliseconds);\n    }\n  };\n\n  var selectDate = function selectDate(event, dateMeta, timeMeta) {\n    var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);\n    selectTime(date, timeMeta);\n\n    if (props.minDate && props.minDate > date) {\n      date = props.minDate;\n    }\n\n    if (props.maxDate && props.maxDate < date) {\n      date = props.maxDate;\n    }\n\n    var selectedValues = date;\n\n    if (isSingleSelection()) {\n      updateModel(event, date);\n    } else if (isMultipleSelection()) {\n      selectedValues = props.value ? [].concat(_toConsumableArray(props.value), [date]) : [date];\n      updateModel(event, selectedValues);\n    } else if (isRangeSelection()) {\n      if (props.value && props.value.length) {\n        var startDate = props.value[0];\n        var endDate = props.value[1];\n\n        if (!endDate) {\n          if (date.getTime() >= startDate.getTime()) {\n            endDate = date;\n          } else {\n            endDate = startDate;\n            startDate = date;\n          }\n        } else {\n          startDate = date;\n          endDate = null;\n        }\n\n        selectedValues = [startDate, endDate];\n        updateModel(event, selectedValues);\n      } else {\n        selectedValues = [date, null];\n        updateModel(event, selectedValues);\n      }\n    }\n\n    if (props.onSelect) {\n      props.onSelect({\n        originalEvent: event,\n        value: date\n      });\n    }\n\n    updateInputfield(selectedValues);\n  };\n\n  var decrementDecade = function decrementDecade() {\n    var _currentYear = currentYear - 10;\n\n    setCurrentYear(_currentYear);\n    return _currentYear;\n  };\n\n  var incrementDecade = function incrementDecade() {\n    var _currentYear = currentYear + 10;\n\n    setCurrentYear(_currentYear);\n    return _currentYear;\n  };\n\n  var switchToMonthView = function switchToMonthView(event) {\n    setCurrentView('month');\n    event.preventDefault();\n  };\n\n  var switchToYearView = function switchToYearView(event) {\n    setCurrentView('year');\n    event.preventDefault();\n  };\n\n  var onMonthSelect = function onMonthSelect(event, month) {\n    if (props.view === 'month') {\n      onDateSelect(event, {\n        year: currentYear,\n        month: month,\n        day: 1,\n        selectable: true\n      });\n      event.preventDefault();\n    } else {\n      setCurrentMonth(month);\n      createMonthsMeta(month, currentYear);\n      var currentDate = new Date(getCurrentDateTime().getTime());\n      currentDate.setDate(1); // #2948 always set to 1st of month\n\n      currentDate.setMonth(month);\n      currentDate.setYear(currentYear);\n      setViewDateState(currentDate);\n      setCurrentView('date');\n      props.onMonthChange && props.onMonthChange({\n        month: month + 1,\n        year: currentYear\n      });\n    }\n  };\n\n  var onYearSelect = function onYearSelect(event, year) {\n    if (props.view === 'year') {\n      onDateSelect(event, {\n        year: year,\n        month: 0,\n        day: 1,\n        selectable: true\n      });\n    } else {\n      setCurrentYear(year);\n      setCurrentView('month');\n      props.onMonthChange && props.onMonthChange({\n        month: currentMonth + 1,\n        year: year\n      });\n    }\n  };\n\n  var updateModel = function updateModel(event, value) {\n    if (props.onChange) {\n      var newValue = value && value instanceof Date ? new Date(value.getTime()) : value;\n      viewStateChanged.current = true;\n      props.onChange({\n        originalEvent: event,\n        value: newValue,\n        stopPropagation: function stopPropagation() {},\n        preventDefault: function preventDefault() {},\n        target: {\n          name: props.name,\n          id: props.id,\n          value: newValue\n        }\n      });\n    }\n  };\n\n  var show = function show(type) {\n    if (props.onVisibleChange) {\n      props.onVisibleChange({\n        visible: true,\n        type: type\n      });\n    } else {\n      setOverlayVisibleState(true);\n\n      overlayEventListener.current = function (e) {\n        if (!isOutsideClicked(e)) {\n          isOverlayClicked.current = true;\n        }\n      };\n\n      OverlayService.on('overlay-click', overlayEventListener.current);\n    }\n  };\n\n  var hide = function hide(type, callback) {\n    var _hideCallback = function _hideCallback() {\n      viewStateChanged.current = false;\n      ignoreFocusFunctionality.current = false;\n      isOverlayClicked.current = false;\n      callback && callback();\n      OverlayService.off('overlay-click', overlayEventListener.current);\n      overlayEventListener.current = null;\n    };\n\n    props.touchUI && disableModality();\n\n    if (props.onVisibleChange) {\n      props.onVisibleChange({\n        visible: false,\n        type: type,\n        callback: _hideCallback\n      });\n    } else {\n      setOverlayVisibleState(false);\n\n      _hideCallback();\n    }\n  };\n\n  var onOverlayEnter = function onOverlayEnter() {\n    if (props.autoZIndex) {\n      var key = props.touchUI ? 'modal' : 'overlay';\n      ZIndexUtils.set(key, overlayRef.current, PrimeReact.autoZIndex, props.baseZIndex || PrimeReact.zIndex[key]);\n    }\n\n    alignOverlay();\n  };\n\n  var onOverlayEntered = function onOverlayEntered() {\n    bindOverlayListener();\n    props.onShow && props.onShow();\n  };\n\n  var onOverlayExit = function onOverlayExit() {\n    unbindOverlayListener();\n  };\n\n  var onOverlayExited = function onOverlayExited() {\n    ZIndexUtils.clear(overlayRef.current);\n    props.onHide && props.onHide();\n  };\n\n  var appendDisabled = function appendDisabled() {\n    return props.appendTo === 'self' || props.inline;\n  };\n\n  var alignOverlay = function alignOverlay() {\n    if (props.touchUI) {\n      enableModality();\n    } else if (overlayRef && overlayRef.current && inputRef && inputRef.current) {\n      DomHandler.alignOverlay(overlayRef.current, inputRef.current, props.appendTo || PrimeReact.appendTo);\n\n      if (appendDisabled()) {\n        DomHandler.relativePosition(overlayRef.current, inputRef.current);\n      } else {\n        if (currentView === 'date') {\n          overlayRef.current.style.width = DomHandler.getOuterWidth(overlayRef.current) + 'px';\n          overlayRef.current.style.minWidth = DomHandler.getOuterWidth(inputRef.current) + 'px';\n        } else {\n          overlayRef.current.style.width = DomHandler.getOuterWidth(inputRef.current) + 'px';\n        }\n\n        DomHandler.absolutePosition(overlayRef.current, inputRef.current);\n      }\n    }\n  };\n\n  var enableModality = function enableModality() {\n    if (!touchUIMask.current) {\n      touchUIMask.current = document.createElement('div');\n      touchUIMask.current.style.zIndex = String(ZIndexUtils.get(overlayRef.current) - 1);\n      DomHandler.addMultipleClasses(touchUIMask.current, 'p-component-overlay p-datepicker-mask p-datepicker-mask-scrollblocker p-component-overlay-enter');\n\n      touchUIMaskClickListener.current = function () {\n        disableModality();\n        hide();\n      };\n\n      touchUIMask.current.addEventListener('click', touchUIMaskClickListener.current);\n      document.body.appendChild(touchUIMask.current);\n      DomHandler.addClass(document.body, 'p-overflow-hidden');\n    }\n  };\n\n  var disableModality = function disableModality() {\n    if (touchUIMask.current) {\n      DomHandler.addClass(touchUIMask.current, 'p-component-overlay-leave');\n      touchUIMask.current.addEventListener('animationend', function () {\n        destroyMask();\n      });\n    }\n  };\n\n  var destroyMask = function destroyMask() {\n    if (touchUIMask.current) {\n      touchUIMask.current.removeEventListener('click', touchUIMaskClickListener.current);\n      touchUIMaskClickListener.current = null;\n      document.body.removeChild(touchUIMask.current);\n      touchUIMask.current = null;\n    }\n\n    var bodyChildren = document.body.children;\n    var hasBlockerMasks;\n\n    for (var i = 0; i < bodyChildren.length; i++) {\n      var bodyChild = bodyChildren[i];\n\n      if (DomHandler.hasClass(bodyChild, 'p-datepicker-mask-scrollblocker')) {\n        hasBlockerMasks = true;\n        break;\n      }\n    }\n\n    if (!hasBlockerMasks) {\n      DomHandler.removeClass(document.body, 'p-overflow-hidden');\n    }\n  };\n\n  var isOutsideClicked = function isOutsideClicked(event) {\n    return elementRef.current && !(elementRef.current.isSameNode(event.target) || isNavIconClicked(event.target) || elementRef.current.contains(event.target) || overlayRef.current && overlayRef.current.contains(event.target));\n  };\n\n  var isNavIconClicked = function isNavIconClicked(target) {\n    return DomHandler.hasClass(target, 'p-datepicker-prev') || DomHandler.hasClass(target, 'p-datepicker-prev-icon') || DomHandler.hasClass(target, 'p-datepicker-next') || DomHandler.hasClass(target, 'p-datepicker-next-icon');\n  };\n\n  var getFirstDayOfMonthIndex = function getFirstDayOfMonthIndex(month, year) {\n    var day = new Date();\n    day.setDate(1);\n    day.setMonth(month);\n    day.setFullYear(year);\n    var dayIndex = day.getDay() + getSundayIndex();\n    return dayIndex >= 7 ? dayIndex - 7 : dayIndex;\n  };\n\n  var getDaysCountInMonth = function getDaysCountInMonth(month, year) {\n    return 32 - daylightSavingAdjust(new Date(year, month, 32)).getDate();\n  };\n\n  var getDaysCountInPrevMonth = function getDaysCountInPrevMonth(month, year) {\n    var prev = getPreviousMonthAndYear(month, year);\n    return getDaysCountInMonth(prev.month, prev.year);\n  };\n\n  var daylightSavingAdjust = function daylightSavingAdjust(date) {\n    if (!date) {\n      return null;\n    }\n\n    date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n    return date;\n  };\n\n  var getPreviousMonthAndYear = function getPreviousMonthAndYear(month, year) {\n    var m, y;\n\n    if (month === 0) {\n      m = 11;\n      y = year - 1;\n    } else {\n      m = month - 1;\n      y = year;\n    }\n\n    return {\n      'month': m,\n      'year': y\n    };\n  };\n\n  var getNextMonthAndYear = function getNextMonthAndYear(month, year) {\n    var m, y;\n\n    if (month === 11) {\n      m = 0;\n      y = year + 1;\n    } else {\n      m = month + 1;\n      y = year;\n    }\n\n    return {\n      'month': m,\n      'year': y\n    };\n  };\n\n  var getSundayIndex = function getSundayIndex() {\n    var firstDayOfWeek = localeOption('firstDayOfWeek', props.locale);\n    return firstDayOfWeek > 0 ? 7 - firstDayOfWeek : 0;\n  };\n\n  var createWeekDaysMeta = function createWeekDaysMeta() {\n    var weekDays = [];\n\n    var _localeOptions = localeOptions(props.locale),\n        dayIndex = _localeOptions.firstDayOfWeek,\n        dayNamesMin = _localeOptions.dayNamesMin;\n\n    for (var i = 0; i < 7; i++) {\n      weekDays.push(dayNamesMin[dayIndex]);\n      dayIndex = dayIndex === 6 ? 0 : ++dayIndex;\n    }\n\n    return weekDays;\n  };\n\n  var createMonthsMeta = function createMonthsMeta(month, year) {\n    var months = [];\n\n    for (var i = 0; i < props.numberOfMonths; i++) {\n      var m = month + i;\n      var y = year;\n\n      if (m > 11) {\n        m = m % 11 - 1;\n        y = year + 1;\n      }\n\n      months.push(createMonthMeta(m, y));\n    }\n\n    return months;\n  };\n\n  var createMonthMeta = function createMonthMeta(month, year) {\n    var dates = [];\n    var firstDay = getFirstDayOfMonthIndex(month, year);\n    var daysLength = getDaysCountInMonth(month, year);\n    var prevMonthDaysLength = getDaysCountInPrevMonth(month, year);\n    var dayNo = 1;\n    var today = new Date();\n    var weekNumbers = [];\n    var monthRows = Math.ceil((daysLength + firstDay) / 7);\n\n    for (var i = 0; i < monthRows; i++) {\n      var week = [];\n\n      if (i === 0) {\n        for (var j = prevMonthDaysLength - firstDay + 1; j <= prevMonthDaysLength; j++) {\n          var prev = getPreviousMonthAndYear(month, year);\n          week.push({\n            day: j,\n            month: prev.month,\n            year: prev.year,\n            otherMonth: true,\n            today: isToday(today, j, prev.month, prev.year),\n            selectable: isSelectable(j, prev.month, prev.year, true)\n          });\n        }\n\n        var remainingDaysLength = 7 - week.length;\n\n        for (var _j = 0; _j < remainingDaysLength; _j++) {\n          week.push({\n            day: dayNo,\n            month: month,\n            year: year,\n            today: isToday(today, dayNo, month, year),\n            selectable: isSelectable(dayNo, month, year, false)\n          });\n          dayNo++;\n        }\n      } else {\n        for (var _j2 = 0; _j2 < 7; _j2++) {\n          if (dayNo > daysLength) {\n            var next = getNextMonthAndYear(month, year);\n            week.push({\n              day: dayNo - daysLength,\n              month: next.month,\n              year: next.year,\n              otherMonth: true,\n              today: isToday(today, dayNo - daysLength, next.month, next.year),\n              selectable: isSelectable(dayNo - daysLength, next.month, next.year, true)\n            });\n          } else {\n            week.push({\n              day: dayNo,\n              month: month,\n              year: year,\n              today: isToday(today, dayNo, month, year),\n              selectable: isSelectable(dayNo, month, year, false)\n            });\n          }\n\n          dayNo++;\n        }\n      }\n\n      if (props.showWeek) {\n        weekNumbers.push(getWeekNumber(new Date(week[0].year, week[0].month, week[0].day)));\n      }\n\n      dates.push(week);\n    }\n\n    return {\n      month: month,\n      year: year,\n      dates: dates,\n      weekNumbers: weekNumbers\n    };\n  };\n\n  var getWeekNumber = function getWeekNumber(date) {\n    var checkDate = new Date(date.getTime());\n    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n    var time = checkDate.getTime();\n    checkDate.setMonth(0);\n    checkDate.setDate(1);\n    return Math.floor(Math.round((time - checkDate.getTime()) / 86400000) / 7) + 1;\n  };\n\n  var isSelectable = function isSelectable(day, month, year, otherMonth) {\n    var validMin = true;\n    var validMax = true;\n    var validDate = true;\n    var validDay = true;\n    var validMonth = true;\n\n    if (props.minDate) {\n      if (props.minDate.getFullYear() > year) {\n        validMin = false;\n      } else if (props.minDate.getFullYear() === year) {\n        if (props.minDate.getMonth() > month) {\n          validMin = false;\n        } else if (props.minDate.getMonth() === month) {\n          if (props.minDate.getDate() > day) {\n            validMin = false;\n          }\n        }\n      }\n    }\n\n    if (props.maxDate) {\n      if (props.maxDate.getFullYear() < year) {\n        validMax = false;\n      } else if (props.maxDate.getFullYear() === year) {\n        if (props.maxDate.getMonth() < month) {\n          validMax = false;\n        } else if (props.maxDate.getMonth() === month) {\n          if (props.maxDate.getDate() < day) {\n            validMax = false;\n          }\n        }\n      }\n    }\n\n    if (props.disabledDates) {\n      validDate = !isDateDisabled(day, month, year);\n    }\n\n    if (props.disabledDays) {\n      validDay = !isDayDisabled(day, month, year);\n    }\n\n    if (props.selectOtherMonths === false && otherMonth) {\n      validMonth = false;\n    }\n\n    return validMin && validMax && validDate && validDay && validMonth;\n  };\n\n  var isSelectableTime = function isSelectableTime(value) {\n    var validMin = true;\n    var validMax = true;\n\n    if (props.minDate && props.minDate.toDateString() === value.toDateString()) {\n      if (props.minDate.getHours() > value.getHours()) {\n        validMin = false;\n      } else if (props.minDate.getHours() === value.getHours()) {\n        if (props.minDate.getMinutes() > value.getMinutes()) {\n          validMin = false;\n        } else if (props.minDate.getMinutes() === value.getMinutes()) {\n          if (props.minDate.getSeconds() > value.getSeconds()) {\n            validMin = false;\n          } else if (props.minDate.getSeconds() === value.getSeconds()) {\n            if (props.minDate.getMilliseconds() > value.getMilliseconds()) {\n              validMin = false;\n            }\n          }\n        }\n      }\n    }\n\n    if (props.maxDate && props.maxDate.toDateString() === value.toDateString()) {\n      if (props.maxDate.getHours() < value.getHours()) {\n        validMax = false;\n      } else if (props.maxDate.getHours() === value.getHours()) {\n        if (props.maxDate.getMinutes() < value.getMinutes()) {\n          validMax = false;\n        } else if (props.maxDate.getMinutes() === value.getMinutes()) {\n          if (props.maxDate.getSeconds() < value.getSeconds()) {\n            validMax = false;\n          } else if (props.maxDate.getSeconds() === value.getSeconds()) {\n            if (props.maxDate.getMilliseconds() < value.getMilliseconds()) {\n              validMax = false;\n            }\n          }\n        }\n      }\n    }\n\n    return validMin && validMax;\n  };\n\n  var isSelected = function isSelected(dateMeta) {\n    if (props.value) {\n      if (isSingleSelection()) {\n        return isDateEquals(props.value, dateMeta);\n      } else if (isMultipleSelection()) {\n        var selected = false;\n\n        var _iterator = _createForOfIteratorHelper(props.value),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var date = _step.value;\n            selected = isDateEquals(date, dateMeta);\n\n            if (selected) {\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return selected;\n      } else if (isRangeSelection()) {\n        if (props.value[1]) return isDateEquals(props.value[0], dateMeta) || isDateEquals(props.value[1], dateMeta) || isDateBetween(props.value[0], props.value[1], dateMeta);else {\n          return isDateEquals(props.value[0], dateMeta);\n        }\n      }\n    } else {\n      return false;\n    }\n  };\n\n  var isComparable = function isComparable() {\n    return props.value != null && typeof props.value !== 'string';\n  };\n\n  var isMonthSelected = function isMonthSelected(month) {\n    if (isComparable()) {\n      var value = isRangeSelection() ? props.value[0] : props.value;\n      return !isMultipleSelection() ? value.getMonth() === month && value.getFullYear() === currentYear : false;\n    }\n\n    return false;\n  };\n\n  var isYearSelected = function isYearSelected(year) {\n    if (isComparable()) {\n      var value = isRangeSelection() ? props.value[0] : props.value;\n      return !isMultipleSelection() && isComparable() ? value.getFullYear() === year : false;\n    }\n\n    return false;\n  };\n\n  var switchViewButtonDisabled = function switchViewButtonDisabled() {\n    return props.numberOfMonths > 1 || props.disabled;\n  };\n\n  var isDateEquals = function isDateEquals(value, dateMeta) {\n    if (value && value instanceof Date) return value.getDate() === dateMeta.day && value.getMonth() === dateMeta.month && value.getFullYear() === dateMeta.year;else return false;\n  };\n\n  var isDateBetween = function isDateBetween(start, end, dateMeta) {\n    var between = false;\n\n    if (start && end) {\n      var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);\n      return start.getTime() <= date.getTime() && end.getTime() >= date.getTime();\n    }\n\n    return between;\n  };\n\n  var isSingleSelection = function isSingleSelection() {\n    return props.selectionMode === 'single';\n  };\n\n  var isRangeSelection = function isRangeSelection() {\n    return props.selectionMode === 'range';\n  };\n\n  var isMultipleSelection = function isMultipleSelection() {\n    return props.selectionMode === 'multiple';\n  };\n\n  var isToday = function isToday(today, day, month, year) {\n    return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;\n  };\n\n  var isDateDisabled = function isDateDisabled(day, month, year) {\n    return props.disabledDates ? props.disabledDates.some(function (d) {\n      return d.getFullYear() === year && d.getMonth() === month && d.getDate() === day;\n    }) : false;\n  };\n\n  var isDayDisabled = function isDayDisabled(day, month, year) {\n    if (props.disabledDays) {\n      var weekday = new Date(year, month, day);\n      var weekdayNumber = weekday.getDay();\n      return props.disabledDays.indexOf(weekdayNumber) !== -1;\n    }\n\n    return false;\n  };\n\n  var updateInputfield = function updateInputfield(value) {\n    if (!inputRef.current) {\n      return;\n    }\n\n    var formattedValue = '';\n\n    if (value) {\n      try {\n        if (isSingleSelection()) {\n          formattedValue = isValidDate(value) ? formatDateTime(value) : '';\n        } else if (isMultipleSelection()) {\n          for (var i = 0; i < value.length; i++) {\n            var selectedValue = value[i];\n            var dateAsString = isValidDate(selectedValue) ? formatDateTime(selectedValue) : '';\n            formattedValue += dateAsString;\n\n            if (i !== value.length - 1) {\n              formattedValue += ', ';\n            }\n          }\n        } else if (isRangeSelection()) {\n          if (value && value.length) {\n            var startDate = value[0];\n            var endDate = value[1];\n            formattedValue = isValidDate(startDate) ? formatDateTime(startDate) : '';\n\n            if (endDate) {\n              formattedValue += isValidDate(endDate) ? ' - ' + formatDateTime(endDate) : '';\n            }\n          }\n        }\n      } catch (err) {\n        formattedValue = value;\n      }\n    }\n\n    inputRef.current.value = formattedValue;\n  };\n\n  var formatDateTime = function formatDateTime(date) {\n    var formattedValue = null;\n\n    if (date) {\n      if (props.timeOnly) {\n        formattedValue = formatTime(date);\n      } else {\n        formattedValue = formatDate(date, getDateFormat());\n\n        if (props.showTime) {\n          formattedValue += ' ' + formatTime(date);\n        }\n      }\n    }\n\n    return formattedValue;\n  };\n\n  var formatDate = function formatDate(date, format) {\n    if (!date) {\n      return '';\n    }\n\n    var iFormat;\n\n    var lookAhead = function lookAhead(match) {\n      var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n      if (matches) {\n        iFormat++;\n      }\n\n      return matches;\n    },\n        formatNumber = function formatNumber(match, value, len) {\n      var num = '' + value;\n\n      if (lookAhead(match)) {\n        while (num.length < len) {\n          num = '0' + num;\n        }\n      }\n\n      return num;\n    },\n        formatName = function formatName(match, value, shortNames, longNames) {\n      return lookAhead(match) ? longNames[value] : shortNames[value];\n    };\n\n    var output = '';\n    var literal = false;\n\n    var _localeOptions2 = localeOptions(props.locale),\n        dayNamesShort = _localeOptions2.dayNamesShort,\n        dayNames = _localeOptions2.dayNames,\n        monthNamesShort = _localeOptions2.monthNamesShort,\n        monthNames = _localeOptions2.monthNames;\n\n    if (date) {\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === '\\'' && !lookAhead('\\'')) {\n            literal = false;\n          } else {\n            output += format.charAt(iFormat);\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case 'd':\n              output += formatNumber('d', date.getDate(), 2);\n              break;\n\n            case 'D':\n              output += formatName('D', date.getDay(), dayNamesShort, dayNames);\n              break;\n\n            case 'o':\n              output += formatNumber('o', Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n              break;\n\n            case 'm':\n              output += formatNumber('m', date.getMonth() + 1, 2);\n              break;\n\n            case 'M':\n              output += formatName('M', date.getMonth(), monthNamesShort, monthNames);\n              break;\n\n            case 'y':\n              output += lookAhead('y') ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? '0' : '') + date.getFullYear() % 100;\n              break;\n\n            case '@':\n              output += date.getTime();\n              break;\n\n            case '!':\n              output += date.getTime() * 10000 + ticksTo1970;\n              break;\n\n            case '\\'':\n              if (lookAhead('\\'')) {\n                output += '\\'';\n              } else {\n                literal = true;\n              }\n\n              break;\n\n            default:\n              output += format.charAt(iFormat);\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n\n  var formatTime = function formatTime(date) {\n    if (!date) {\n      return '';\n    }\n\n    var output = '';\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var seconds = date.getSeconds();\n    var milliseconds = date.getMilliseconds();\n\n    if (props.hourFormat === '12' && hours > 11 && hours !== 12) {\n      hours -= 12;\n    }\n\n    if (props.hourFormat === '12') {\n      output += hours === 0 ? 12 : hours < 10 ? '0' + hours : hours;\n    } else {\n      output += hours < 10 ? '0' + hours : hours;\n    }\n\n    output += ':';\n    output += minutes < 10 ? '0' + minutes : minutes;\n\n    if (props.showSeconds) {\n      output += ':';\n      output += seconds < 10 ? '0' + seconds : seconds;\n    }\n\n    if (props.showMillisec) {\n      output += '.';\n      output += milliseconds < 100 ? (milliseconds < 10 ? '00' : '0') + milliseconds : milliseconds;\n    }\n\n    if (props.hourFormat === '12') {\n      output += date.getHours() > 11 ? ' PM' : ' AM';\n    }\n\n    return output;\n  };\n\n  var parseValueFromString = function parseValueFromString(text) {\n    if (!text || text.trim().length === 0) {\n      return null;\n    }\n\n    var value;\n\n    if (isSingleSelection()) {\n      value = parseDateTime(text);\n    } else if (isMultipleSelection()) {\n      var tokens = text.split(',');\n      value = [];\n\n      var _iterator2 = _createForOfIteratorHelper(tokens),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var token = _step2.value;\n          value.push(parseDateTime(token.trim()));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else if (isRangeSelection()) {\n      var _tokens = text.split(' - ');\n\n      value = [];\n\n      for (var i = 0; i < _tokens.length; i++) {\n        value[i] = parseDateTime(_tokens[i].trim());\n      }\n    }\n\n    return value;\n  };\n\n  var parseDateTime = function parseDateTime(text) {\n    var date;\n    var parts = text.split(' ');\n\n    if (props.timeOnly) {\n      date = new Date();\n      populateTime(date, parts[0], parts[1]);\n    } else {\n      if (props.showTime) {\n        date = parseDate(parts[0], getDateFormat());\n        populateTime(date, parts[1], parts[2]);\n      } else {\n        date = parseDate(text, getDateFormat());\n      }\n    }\n\n    return date;\n  };\n\n  var populateTime = function populateTime(value, timeString, ampm) {\n    if (props.hourFormat === '12' && ampm !== 'PM' && ampm !== 'AM') {\n      throw new Error('Invalid Time');\n    }\n\n    var time = parseTime(timeString, ampm);\n    value.setHours(time.hour);\n    value.setMinutes(time.minute);\n    value.setSeconds(time.second);\n    value.setMilliseconds(time.millisecond);\n  };\n\n  var parseTime = function parseTime(value, ampm) {\n    value = props.showMillisec ? value.replace('.', ':') : value;\n    var tokens = value.split(':');\n    var validTokenLength = props.showSeconds ? 3 : 2;\n    validTokenLength = props.showMillisec ? validTokenLength + 1 : validTokenLength;\n\n    if (tokens.length !== validTokenLength || tokens[0].length !== 2 || tokens[1].length !== 2 || props.showSeconds && tokens[2].length !== 2 || props.showMillisec && tokens[3].length !== 3) {\n      throw new Error('Invalid time');\n    }\n\n    var h = parseInt(tokens[0], 10);\n    var m = parseInt(tokens[1], 10);\n    var s = props.showSeconds ? parseInt(tokens[2], 10) : null;\n    var ms = props.showMillisec ? parseInt(tokens[3], 10) : null;\n\n    if (isNaN(h) || isNaN(m) || h > 23 || m > 59 || props.hourFormat === '12' && h > 12 || props.showSeconds && (isNaN(s) || s > 59) || props.showMillisec && (isNaN(s) || s > 1000)) {\n      throw new Error('Invalid time');\n    } else {\n      if (props.hourFormat === '12' && h !== 12 && ampm === 'PM') {\n        h += 12;\n      }\n\n      return {\n        hour: h,\n        minute: m,\n        second: s,\n        millisecond: ms\n      };\n    }\n  }; // Ported from jquery-ui datepicker parseDate\n\n\n  var parseDate = function parseDate(value, format) {\n    if (format == null || value == null) {\n      throw new Error('Invalid arguments');\n    }\n\n    value = _typeof(value) === \"object\" ? value.toString() : value + \"\";\n\n    if (value === \"\") {\n      return null;\n    }\n\n    var iFormat,\n        dim,\n        extra,\n        iValue = 0,\n        shortYearCutoff = typeof props.shortYearCutoff !== \"string\" ? props.shortYearCutoff : new Date().getFullYear() % 100 + parseInt(props.shortYearCutoff, 10),\n        year = -1,\n        month = -1,\n        day = -1,\n        doy = -1,\n        literal = false,\n        date,\n        lookAhead = function lookAhead(match) {\n      var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n\n      if (matches) {\n        iFormat++;\n      }\n\n      return matches;\n    },\n        getNumber = function getNumber(match) {\n      var isDoubled = lookAhead(match),\n          size = match === \"@\" ? 14 : match === \"!\" ? 20 : match === \"y\" && isDoubled ? 4 : match === \"o\" ? 3 : 2,\n          minSize = match === \"y\" ? size : 1,\n          digits = new RegExp(\"^\\\\d{\" + minSize + \",\" + size + \"}\"),\n          num = value.substring(iValue).match(digits);\n\n      if (!num) {\n        throw new Error('Missing number at position ' + iValue);\n      }\n\n      iValue += num[0].length;\n      return parseInt(num[0], 10);\n    },\n        getName = function getName(match, shortNames, longNames) {\n      var index = -1;\n      var arr = lookAhead(match) ? longNames : shortNames;\n      var names = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        names.push([i, arr[i]]);\n      }\n\n      names.sort(function (a, b) {\n        return -(a[1].length - b[1].length);\n      });\n\n      for (var _i = 0; _i < names.length; _i++) {\n        var name = names[_i][1];\n\n        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n          index = names[_i][0];\n          iValue += name.length;\n          break;\n        }\n      }\n\n      if (index !== -1) {\n        return index + 1;\n      } else {\n        throw new Error('Unknown name at position ' + iValue);\n      }\n    },\n        checkLiteral = function checkLiteral() {\n      if (value.charAt(iValue) !== format.charAt(iFormat)) {\n        throw new Error('Unexpected literal at position ' + iValue);\n      }\n\n      iValue++;\n    };\n\n    if (props.view === 'month') {\n      day = 1;\n    }\n\n    var _localeOptions3 = localeOptions(props.locale),\n        dayNamesShort = _localeOptions3.dayNamesShort,\n        dayNames = _localeOptions3.dayNames,\n        monthNamesShort = _localeOptions3.monthNamesShort,\n        monthNames = _localeOptions3.monthNames;\n\n    for (iFormat = 0; iFormat < format.length; iFormat++) {\n      if (literal) {\n        if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n          literal = false;\n        } else {\n          checkLiteral();\n        }\n      } else {\n        switch (format.charAt(iFormat)) {\n          case \"d\":\n            day = getNumber(\"d\");\n            break;\n\n          case \"D\":\n            getName(\"D\", dayNamesShort, dayNames);\n            break;\n\n          case \"o\":\n            doy = getNumber(\"o\");\n            break;\n\n          case \"m\":\n            month = getNumber(\"m\");\n            break;\n\n          case \"M\":\n            month = getName(\"M\", monthNamesShort, monthNames);\n            break;\n\n          case \"y\":\n            year = getNumber(\"y\");\n            break;\n\n          case \"@\":\n            date = new Date(getNumber(\"@\"));\n            year = date.getFullYear();\n            month = date.getMonth() + 1;\n            day = date.getDate();\n            break;\n\n          case \"!\":\n            date = new Date((getNumber(\"!\") - ticksTo1970) / 10000);\n            year = date.getFullYear();\n            month = date.getMonth() + 1;\n            day = date.getDate();\n            break;\n\n          case \"'\":\n            if (lookAhead(\"'\")) {\n              checkLiteral();\n            } else {\n              literal = true;\n            }\n\n            break;\n\n          default:\n            checkLiteral();\n        }\n      }\n    }\n\n    if (iValue < value.length) {\n      extra = value.substr(iValue);\n\n      if (!/^\\s+/.test(extra)) {\n        throw new Error('Extra/unparsed characters found in date: ' + extra);\n      }\n    }\n\n    if (year === -1) {\n      year = new Date().getFullYear();\n    } else if (year < 100) {\n      year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);\n    }\n\n    if (doy > -1) {\n      month = 1;\n      day = doy;\n\n      do {\n        dim = getDaysCountInMonth(year, month - 1);\n\n        if (day <= dim) {\n          break;\n        }\n\n        month++;\n        day -= dim;\n      } while (true);\n    }\n\n    date = daylightSavingAdjust(new Date(year, month - 1, day));\n\n    if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n      throw new Error('Invalid date'); // E.g. 31/02/00\n    }\n\n    return date;\n  };\n\n  var isInMinYear = function isInMinYear(viewDate) {\n    return props.minDate && props.minDate.getFullYear() === viewDate.getFullYear();\n  };\n\n  var isInMaxYear = function isInMaxYear(viewDate) {\n    return props.maxDate && props.maxDate.getFullYear() === viewDate.getFullYear();\n  };\n\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(inputRef, props.inputRef);\n  }, [inputRef, props.inputRef]);\n  useMountEffect(function () {\n    var unbindMaskEvents = null;\n    var viewDate = getViewDate(props.viewDate);\n    validateDate(viewDate);\n    setViewDateState(viewDate);\n    setCurrentMonth(viewDate.getMonth());\n    setCurrentYear(viewDate.getFullYear());\n    setCurrentView(props.view);\n\n    if (props.inline) {\n      overlayRef && overlayRef.current.setAttribute(attributeSelector, '');\n\n      if (!props.disabled) {\n        initFocusableCell();\n\n        if (props.numberOfMonths === 1) {\n          overlayRef.current.style.width = DomHandler.getOuterWidth(overlayRef.current) + 'px';\n        }\n      }\n    } else if (props.mask) {\n      unbindMaskEvents = mask(inputRef.current, {\n        mask: props.mask,\n        readOnly: props.readOnlyInput || props.disabled,\n        onChange: function onChange(e) {\n          !ignoreMaskChange.current && updateValueOnInput(e.originalEvent, e.value);\n          ignoreMaskChange.current = false;\n        },\n        onBlur: function onBlur() {\n          ignoreMaskChange.current = true;\n        }\n      }).unbindEvents;\n    }\n\n    if (props.value) {\n      updateInputfield(props.value);\n    }\n\n    return function () {\n      props.mask && unbindMaskEvents();\n    };\n  });\n  useUpdateEffect(function () {\n    setCurrentView(props.view);\n  }, [props.view]);\n  useUpdateEffect(function () {\n    if (!props.onViewDateChange && !viewStateChanged.current) {\n      var propValue = props.value;\n\n      if (Array.isArray(propValue)) {\n        propValue = propValue[0];\n      }\n\n      var prevPropValue = previousValue;\n\n      if (Array.isArray(prevPropValue)) {\n        prevPropValue = prevPropValue[0];\n      }\n\n      if (!prevPropValue && propValue || propValue && propValue instanceof Date && propValue.getTime() !== prevPropValue.getTime()) {\n        var viewDate = props.viewDate && isValidDate(props.viewDate) ? props.viewDate : propValue && isValidDate(propValue) ? propValue : new Date();\n        validateDate(viewDate);\n        setViewDateState(viewDate);\n        viewStateChanged.current = true;\n      }\n    }\n  }, [props.onViewDateChange, props.value]);\n  useUpdateEffect(function () {\n    if (previousValue !== props.value && (!viewStateChanged || !visible)) {\n      updateInputfield(props.value);\n    }\n  }, [props.value, visible]);\n  useUpdateEffect(function () {\n    updateInputfield(props.value);\n  }, [props.dateFormat, props.hourFormat, props.timeOnly, props.showSeconds, props.showMillisec]);\n  useUpdateEffect(function () {\n    if (overlayRef.current) {\n      setNavigationState(viewDateState);\n      updateFocus();\n    }\n  });\n  useUnmountEffect(function () {\n    if (touchUIMask.current) {\n      disableModality();\n      touchUIMask.current = null;\n    }\n\n    ZIndexUtils.clear(overlayRef.current);\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      show: show,\n      hide: hide,\n      getCurrentDateTime: getCurrentDateTime,\n      getViewDate: getViewDate,\n      updateViewDate: updateViewDate,\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getOverlay: function getOverlay() {\n        return overlayRef.current;\n      },\n      getInput: function getInput() {\n        return inputRef.current;\n      }\n    };\n  });\n\n  var createBackwardNavigator = function createBackwardNavigator(isVisible) {\n    var navigatorProps = isVisible ? {\n      'onClick': onPrevButtonClick,\n      'onKeyDown': function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    } : {\n      'style': {\n        visibility: 'hidden'\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"button\", _extends({\n      type: \"button\",\n      className: \"p-datepicker-prev\"\n    }, navigatorProps), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"p-datepicker-prev-icon pi pi-chevron-left\"\n    }), /*#__PURE__*/React.createElement(Ripple, null));\n  };\n\n  var createForwardNavigator = function createForwardNavigator(isVisible) {\n    var navigatorProps = isVisible ? {\n      'onClick': onNextButtonClick,\n      'onKeyDown': function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    } : {\n      'style': {\n        visibility: 'hidden'\n      }\n    };\n    return /*#__PURE__*/React.createElement(\"button\", _extends({\n      type: \"button\",\n      className: \"p-datepicker-next\"\n    }, navigatorProps), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"p-datepicker-next-icon pi pi-chevron-right\"\n    }), /*#__PURE__*/React.createElement(Ripple, null));\n  };\n\n  var createTitleMonthElement = function createTitleMonthElement(month) {\n    var monthNames = localeOption('monthNames', props.locale);\n\n    if (props.monthNavigator && props.view !== 'month') {\n      var viewDate = getViewDate();\n      var viewMonth = viewDate.getMonth();\n      var displayedMonthOptions = monthNames.map(function (month, index) {\n        return (!isInMinYear(viewDate) || index >= props.minDate.getMonth()) && (!isInMaxYear(viewDate) || index <= props.maxDate.getMonth()) ? {\n          label: month,\n          value: index,\n          index: index\n        } : null;\n      }).filter(function (option) {\n        return !!option;\n      });\n      var displayedMonthNames = displayedMonthOptions.map(function (option) {\n        return option.label;\n      });\n\n      var _content = /*#__PURE__*/React.createElement(\"select\", {\n        className: \"p-datepicker-month\",\n        onChange: function onChange(e) {\n          return onMonthDropdownChange(e, e.target.value);\n        },\n        value: viewMonth\n      }, displayedMonthOptions.map(function (option) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: option.label,\n          value: option.value\n        }, option.label);\n      }));\n\n      if (props.monthNavigatorTemplate) {\n        var defaultContentOptions = {\n          onChange: onMonthDropdownChange,\n          className: 'p-datepicker-month',\n          value: viewMonth,\n          names: displayedMonthNames,\n          options: displayedMonthOptions,\n          element: _content,\n          props: props\n        };\n        return ObjectUtils.getJSXElement(props.monthNavigatorTemplate, defaultContentOptions);\n      }\n\n      return _content;\n    }\n\n    return currentView === 'date' && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"p-datepicker-month p-link\",\n      onClick: switchToMonthView,\n      disabled: switchViewButtonDisabled()\n    }, monthNames[month]);\n  };\n\n  var createTitleYearElement = function createTitleYearElement() {\n    if (props.yearNavigator) {\n      var _yearOptions2 = [];\n      var years = props.yearRange.split(':');\n      var yearStart = parseInt(years[0], 10);\n      var yearEnd = parseInt(years[1], 10);\n\n      for (var i = yearStart; i <= yearEnd; i++) {\n        _yearOptions2.push(i);\n      }\n\n      var viewDate = getViewDate();\n      var viewYear = viewDate.getFullYear();\n\n      var displayedYearNames = _yearOptions2.filter(function (year) {\n        return !(props.minDate && props.minDate.getFullYear() > year) && !(props.maxDate && props.maxDate.getFullYear() < year);\n      });\n\n      var _content2 = /*#__PURE__*/React.createElement(\"select\", {\n        className: \"p-datepicker-year\",\n        onChange: function onChange(e) {\n          return onYearDropdownChange(e, e.target.value);\n        },\n        value: viewYear\n      }, displayedYearNames.map(function (year) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: year,\n          value: year\n        }, year);\n      }));\n\n      if (props.yearNavigatorTemplate) {\n        var options = displayedYearNames.map(function (name, i) {\n          return {\n            label: name,\n            value: name,\n            index: i\n          };\n        });\n        var defaultContentOptions = {\n          onChange: onYearDropdownChange,\n          className: 'p-datepicker-year',\n          value: viewYear,\n          names: displayedYearNames,\n          options: options,\n          element: _content2,\n          props: props\n        };\n        return ObjectUtils.getJSXElement(props.yearNavigatorTemplate, defaultContentOptions);\n      }\n\n      return _content2;\n    }\n\n    return currentView !== 'year' && /*#__PURE__*/React.createElement(\"button\", {\n      className: \"p-datepicker-year p-link\",\n      onClick: switchToYearView,\n      disabled: switchViewButtonDisabled()\n    }, currentYear);\n  };\n\n  var createTitleDecadeElement = function createTitleDecadeElement() {\n    var years = yearPickerValues();\n\n    if (currentView === 'year') {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-datepicker-decade\"\n      }, props.decadeTemplate ? props.decadeTemplate(years) : /*#__PURE__*/React.createElement(\"span\", null, \"\".concat(yearPickerValues()[0], \" - \").concat(yearPickerValues()[yearPickerValues().length - 1])));\n    }\n\n    return null;\n  };\n\n  var createTitle = function createTitle(monthMetaData) {\n    var month = createTitleMonthElement(monthMetaData.month);\n    var year = createTitleYearElement(monthMetaData.year);\n    var decade = createTitleDecadeElement();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-title\"\n    }, month, year, decade);\n  };\n\n  var createDayNames = function createDayNames(weekDays) {\n    var dayNames = weekDays.map(function (weekDay, index) {\n      return /*#__PURE__*/React.createElement(\"th\", {\n        key: \"\".concat(weekDay, \"-\").concat(index),\n        scope: \"col\"\n      }, /*#__PURE__*/React.createElement(\"span\", null, weekDay));\n    });\n\n    if (props.showWeek) {\n      var weekHeader = /*#__PURE__*/React.createElement(\"th\", {\n        scope: \"col\",\n        key: \"wn\",\n        className: \"p-datepicker-weekheader p-disabled\"\n      }, /*#__PURE__*/React.createElement(\"span\", null, localeOption('weekHeader', props.locale)));\n      return [weekHeader].concat(_toConsumableArray(dayNames));\n    }\n\n    return dayNames;\n  };\n\n  var createDateCellContent = function createDateCellContent(date, className, groupIndex) {\n    var content = props.dateTemplate ? props.dateTemplate(date) : date.day;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: className,\n      onClick: function onClick(e) {\n        return onDateSelect(e, date);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return onDateCellKeydown(e, date, groupIndex);\n      }\n    }, content, /*#__PURE__*/React.createElement(Ripple, null));\n  };\n\n  var createWeek = function createWeek(weekDates, weekNumber, groupIndex) {\n    var week = weekDates.map(function (date) {\n      var selected = isSelected(date);\n      var cellClassName = classNames({\n        'p-datepicker-other-month': date.otherMonth,\n        'p-datepicker-today': date.today\n      });\n      var dateClassName = classNames({\n        'p-highlight': selected,\n        'p-disabled': !date.selectable\n      });\n      var content = date.otherMonth && !props.showOtherMonths ? null : createDateCellContent(date, dateClassName, groupIndex);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        key: date.day,\n        className: cellClassName\n      }, content);\n    });\n\n    if (props.showWeek) {\n      var weekNumberCell = /*#__PURE__*/React.createElement(\"td\", {\n        key: 'wn' + weekNumber,\n        className: \"p-datepicker-weeknumber\"\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"p-disabled\"\n      }, weekNumber));\n      return [weekNumberCell].concat(_toConsumableArray(week));\n    }\n\n    return week;\n  };\n\n  var createDates = function createDates(monthMetaData, groupIndex) {\n    return monthMetaData.dates.map(function (weekDates, index) {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: index\n      }, createWeek(weekDates, monthMetaData.weekNumbers[index], groupIndex));\n    });\n  };\n\n  var createDateViewGrid = function createDateViewGrid(monthMetaData, weekDays, groupIndex) {\n    var dayNames = createDayNames(weekDays);\n    var dates = createDates(monthMetaData, groupIndex);\n    return currentView === 'date' && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-calendar-container\"\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"p-datepicker-calendar\"\n    }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, dayNames)), /*#__PURE__*/React.createElement(\"tbody\", null, dates)));\n  };\n\n  var createMonth = function createMonth(monthMetaData, index) {\n    var weekDays = createWeekDaysMeta();\n    var backwardNavigator = createBackwardNavigator(index === 0);\n    var forwardNavigator = createForwardNavigator(props.numberOfMonths === 1 || index === props.numberOfMonths - 1);\n    var title = createTitle(monthMetaData);\n    var dateViewGrid = createDateViewGrid(monthMetaData, weekDays, index);\n    var header = props.headerTemplate ? props.headerTemplate() : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: monthMetaData.month,\n      className: \"p-datepicker-group\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-header\"\n    }, header, backwardNavigator, title, forwardNavigator), dateViewGrid);\n  };\n\n  var createMonths = function createMonths(monthsMetaData) {\n    var groups = monthsMetaData.map(createMonth);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-group-container\"\n    }, groups);\n  };\n\n  var createDateView = function createDateView() {\n    var viewDate = getViewDate();\n    var monthsMetaData = createMonthsMeta(viewDate.getMonth(), viewDate.getFullYear());\n    var months = createMonths(monthsMetaData);\n    return months;\n  };\n\n  var monthPickerValues = function monthPickerValues() {\n    var monthPickerValues = [];\n    var monthNamesShort = localeOption('monthNamesShort', props.locale);\n\n    for (var i = 0; i <= 11; i++) {\n      monthPickerValues.push(monthNamesShort[i]);\n    }\n\n    return monthPickerValues;\n  };\n\n  var yearPickerValues = function yearPickerValues() {\n    var yearPickerValues = [];\n    var base = currentYear - currentYear % 10;\n\n    for (var i = 0; i < 10; i++) {\n      yearPickerValues.push(base + i);\n    }\n\n    return yearPickerValues;\n  };\n\n  var createMonthYearView = function createMonthYearView() {\n    var backwardNavigator = createBackwardNavigator(true);\n    var forwardNavigator = createForwardNavigator(true);\n    var yearElement = createTitleYearElement(getViewDate().getFullYear());\n    var decade = createTitleDecadeElement();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-group-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-group\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-header\"\n    }, backwardNavigator, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-datepicker-title\"\n    }, yearElement, decade), forwardNavigator))));\n  };\n\n  var createDatePicker = function createDatePicker() {\n    if (!props.timeOnly) {\n      if (props.view === 'date') {\n        return createDateView();\n      } else {\n        return createMonthYearView();\n      }\n    }\n\n    return null;\n  };\n\n  var createHourPicker = function createHourPicker() {\n    var currentTime = getCurrentDateTime();\n    var hour = currentTime.getHours();\n\n    if (props.hourFormat === '12') {\n      if (hour === 0) hour = 12;else if (hour > 11 && hour !== 12) hour = hour - 12;\n    }\n\n    var hourDisplay = hour < 10 ? '0' + hour : hour;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-hour-picker\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"p-link\",\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 0, 1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pi pi-chevron-up\"\n    }), /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", null, hourDisplay), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"p-link\",\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 0, -1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pi pi-chevron-down\"\n    }), /*#__PURE__*/React.createElement(Ripple, null)));\n  };\n\n  var createMinutePicker = function createMinutePicker() {\n    var currentTime = getCurrentDateTime();\n    var minute = currentTime.getMinutes();\n    var minuteDisplay = minute < 10 ? '0' + minute : minute;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-minute-picker\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"p-link\",\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 1, 1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pi pi-chevron-up\"\n    }), /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", null, minuteDisplay), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"p-link\",\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 1, -1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"pi pi-chevron-down\"\n    }), /*#__PURE__*/React.createElement(Ripple, null)));\n  };\n\n  var createSecondPicker = function createSecondPicker() {\n    if (props.showSeconds) {\n      var currentTime = getCurrentDateTime();\n      var second = currentTime.getSeconds();\n      var secondDisplay = second < 10 ? '0' + second : second;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-second-picker\"\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-link\",\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 2, 1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pi pi-chevron-up\"\n      }), /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", null, secondDisplay), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-link\",\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 2, -1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pi pi-chevron-down\"\n      }), /*#__PURE__*/React.createElement(Ripple, null)));\n    }\n\n    return null;\n  };\n\n  var createMiliSecondPicker = function createMiliSecondPicker() {\n    if (props.showMillisec) {\n      var currentTime = getCurrentDateTime();\n      var millisecond = currentTime.getMilliseconds();\n      var millisecondDisplay = millisecond < 100 ? (millisecond < 10 ? '00' : '0') + millisecond : millisecond;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-millisecond-picker\"\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-link\",\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 3, 1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pi pi-chevron-up\"\n      }), /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", null, millisecondDisplay), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-link\",\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 3, -1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pi pi-chevron-down\"\n      }), /*#__PURE__*/React.createElement(Ripple, null)));\n    }\n\n    return null;\n  };\n\n  var createAmPmPicker = function createAmPmPicker() {\n    if (props.hourFormat === '12') {\n      var currentTime = getCurrentDateTime();\n      var hour = currentTime.getHours();\n      var display = hour > 11 ? 'PM' : 'AM';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-ampm-picker\"\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-link\",\n        onClick: toggleAmPm\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pi pi-chevron-up\"\n      }), /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", null, display), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"p-link\",\n        onClick: toggleAmPm\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"pi pi-chevron-down\"\n      }), /*#__PURE__*/React.createElement(Ripple, null)));\n    }\n\n    return null;\n  };\n\n  var createSeparator = function createSeparator(separator) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-separator\"\n    }, /*#__PURE__*/React.createElement(\"span\", null, separator));\n  };\n\n  var createTimePicker = function createTimePicker() {\n    if ((props.showTime || props.timeOnly) && currentView === 'date') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-timepicker\"\n      }, createHourPicker(), createSeparator(':'), createMinutePicker(), props.showSeconds && createSeparator(':'), createSecondPicker(), props.showMillisec && createSeparator('.'), createMiliSecondPicker(), props.hourFormat === '12' && createSeparator(':'), createAmPmPicker());\n    }\n\n    return null;\n  };\n\n  var createInputElement = function createInputElement() {\n    if (!props.inline) {\n      return /*#__PURE__*/React.createElement(InputText, {\n        ref: inputRef,\n        id: props.inputId,\n        name: props.name,\n        type: \"text\",\n        className: props.inputClassName,\n        style: props.inputStyle,\n        readOnly: props.readOnlyInput,\n        disabled: props.disabled,\n        required: props.required,\n        autoComplete: \"off\",\n        placeholder: props.placeholder,\n        tabIndex: props.tabIndex,\n        onInput: onUserInput,\n        onFocus: onInputFocus,\n        onBlur: onInputBlur,\n        onKeyDown: onInputKeyDown,\n        \"aria-labelledby\": props.ariaLabelledBy,\n        inputMode: props.inputMode,\n        tooltip: props.tooltip,\n        tooltipOptions: props.tooltipOptions\n      });\n    }\n\n    return null;\n  };\n\n  var createButton = function createButton() {\n    if (props.showIcon) {\n      return /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        icon: props.icon,\n        onClick: onButtonClick,\n        tabIndex: \"-1\",\n        disabled: props.disabled,\n        className: \"p-datepicker-trigger\"\n      });\n    }\n\n    return null;\n  };\n\n  var createContent = function createContent() {\n    var input = createInputElement();\n    var button = createButton();\n\n    if (props.iconPos === 'left') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, button, input);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, input, button);\n  };\n\n  var createButtonBar = function createButtonBar() {\n    if (props.showButtonBar) {\n      var todayClassName = classNames('p-button-text', props.todayButtonClassName);\n      var clearClassName = classNames('p-button-text', props.clearButtonClassName);\n\n      var _localeOptions4 = localeOptions(props.locale),\n          today = _localeOptions4.today,\n          clear = _localeOptions4.clear;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-datepicker-buttonbar\"\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        label: today,\n        onClick: onTodayButtonClick,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        },\n        className: todayClassName\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        label: clear,\n        onClick: onClearButtonClick,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        },\n        className: clearClassName\n      }));\n    }\n\n    return null;\n  };\n\n  var createFooter = function createFooter() {\n    if (props.footerTemplate) {\n      var _content3 = props.footerTemplate();\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-datepicker-footer\"\n      }, _content3);\n    }\n\n    return null;\n  };\n\n  var createMonthPicker = function createMonthPicker() {\n    if (currentView === 'month') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-monthpicker\"\n      }, monthPickerValues().map(function (m, i) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          onClick: function onClick(event) {\n            return onMonthSelect(event, i);\n          },\n          key: \"month\".concat(i + 1),\n          className: classNames('p-monthpicker-month', {\n            'p-highlight': isMonthSelected(i),\n            'p-disabled': !isSelectable(1, i, currentYear)\n          })\n        }, m);\n      }));\n    }\n\n    return null;\n  };\n\n  var createYearPicker = function createYearPicker() {\n    if (currentView === 'year') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"p-yearpicker\"\n      }, yearPickerValues().map(function (y, i) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          onClick: function onClick(event) {\n            return onYearSelect(event, y);\n          },\n          key: \"year\".concat(i + 1),\n          className: classNames('p-yearpicker-year', {\n            'p-highlight': isYearSelected(y)\n          })\n        }, y);\n      }));\n    }\n\n    return null;\n  };\n\n  var otherProps = ObjectUtils.findDiffKeys(props, Calendar.defaultProps);\n  var className = classNames('p-calendar p-component p-inputwrapper', props.className, (_classNames = {}, _defineProperty(_classNames, \"p-calendar-w-btn p-calendar-w-btn-\".concat(props.iconPos), props.showIcon), _defineProperty(_classNames, 'p-calendar-disabled', props.disabled), _defineProperty(_classNames, 'p-calendar-timeonly', props.timeOnly), _defineProperty(_classNames, 'p-inputwrapper-filled', props.value || DomHandler.hasClass(inputRef.current, 'p-filled') && inputRef.current.value !== ''), _defineProperty(_classNames, 'p-inputwrapper-focus', focusedState), _classNames));\n  var panelClassName = classNames('p-datepicker p-component', props.panelClassName, {\n    'p-datepicker-inline': props.inline,\n    'p-disabled': props.disabled,\n    'p-datepicker-timeonly': props.timeOnly,\n    'p-datepicker-multiple-month': props.numberOfMonths > 1,\n    'p-datepicker-monthpicker': currentView === 'month',\n    'p-datepicker-touch-ui': props.touchUI\n  });\n  var content = createContent();\n  var datePicker = createDatePicker();\n  var timePicker = createTimePicker();\n  var buttonBar = createButtonBar();\n  var footer = createFooter();\n  var monthPicker = createMonthPicker();\n  var yearPicker = createYearPicker();\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    ref: elementRef,\n    id: props.id,\n    className: className,\n    style: props.style\n  }, otherProps), content, /*#__PURE__*/React.createElement(CalendarPanel, {\n    ref: overlayRef,\n    className: panelClassName,\n    style: props.panelStyle,\n    appendTo: props.appendTo,\n    inline: props.inline,\n    onClick: onPanelClick,\n    onMouseUp: onPanelMouseUp,\n    \"in\": visible,\n    onEnter: onOverlayEnter,\n    onEntered: onOverlayEntered,\n    onExit: onOverlayExit,\n    onExited: onOverlayExited,\n    transitionOptions: props.transitionOptions\n  }, datePicker, timePicker, monthPicker, yearPicker, buttonBar, footer));\n}));\nCalendar.displayName = 'Calendar';\nCalendar.defaultProps = {\n  __TYPE: 'Calendar',\n  id: null,\n  inputRef: null,\n  name: null,\n  value: null,\n  visible: false,\n  viewDate: null,\n  style: null,\n  className: null,\n  inline: false,\n  selectionMode: 'single',\n  inputId: null,\n  inputStyle: null,\n  inputClassName: null,\n  inputMode: 'none',\n  required: false,\n  readOnlyInput: false,\n  keepInvalid: false,\n  mask: null,\n  disabled: false,\n  tabIndex: null,\n  placeholder: null,\n  showIcon: false,\n  icon: 'pi pi-calendar',\n  iconPos: 'right',\n  showOnFocus: true,\n  numberOfMonths: 1,\n  view: 'date',\n  touchUI: false,\n  showTime: false,\n  timeOnly: false,\n  showSeconds: false,\n  showMillisec: false,\n  hourFormat: '24',\n  stepHour: 1,\n  stepMinute: 1,\n  stepSecond: 1,\n  stepMillisec: 1,\n  shortYearCutoff: '+10',\n  hideOnDateTimeSelect: false,\n  showWeek: false,\n  locale: null,\n  dateFormat: null,\n  panelStyle: null,\n  panelClassName: null,\n  monthNavigator: false,\n  yearNavigator: false,\n  yearRange: null,\n  disabledDates: null,\n  disabledDays: null,\n  minDate: null,\n  maxDate: null,\n  maxDateCount: null,\n  showMinMaxRange: false,\n  showOtherMonths: true,\n  selectOtherMonths: false,\n  showButtonBar: false,\n  todayButtonClassName: 'p-button-secondary',\n  clearButtonClassName: 'p-button-secondary',\n  autoZIndex: true,\n  baseZIndex: 0,\n  appendTo: null,\n  tooltip: null,\n  tooltipOptions: null,\n  ariaLabelledBy: null,\n  dateTemplate: null,\n  decadeTemplate: null,\n  headerTemplate: null,\n  footerTemplate: null,\n  monthNavigatorTemplate: null,\n  yearNavigatorTemplate: null,\n  transitionOptions: null,\n  onVisibleChange: null,\n  onFocus: null,\n  onBlur: null,\n  onInput: null,\n  onSelect: null,\n  onChange: null,\n  onViewDateChange: null,\n  onTodayButtonClick: null,\n  onClearButtonClick: null,\n  onShow: null,\n  onHide: null,\n  onMonthChange: null\n};\nexport { Calendar };","map":null,"metadata":{},"sourceType":"module"}